#include <gtest/gtest.h>
#include <iostream>
#include <fstream>
#include <cstdlib>
#include "../algorithms/ransack.cpp"

/**
 * This is a test where the robot was placed facing a single straight wall. The wall is perpendicular to the wall
 * with a distance of 30cm. After applying the ransac(k) algorithm a single wall is expected to be detected with the 
 * offset of (30,0) and the direction of (0,1). 
 * 
 * RUN WITH
 * catkin_make run_tests
*/

std::list<Vector> old_get_measurements(std::vector<float>& ranges) 
// Line Direction: (0.738469, 0.674288)
// Line Offset: (0.013952, 0.0128973)
{
    std::list<Vector> all_vectors;

    for(int i = 0; i < ranges.size(); i++) {
        float r = ranges[i];
        
        if (r == -1) {
            continue;
        }  

        float angle_increment = 0.006135923322290182;
        const float theta_offset = 0.74; 

        float theta = i * angle_increment + theta_offset;

        Vector vector(r * std::cos(theta), r * std::sin(theta));

        all_vectors.push_back(vector);
    }
    return all_vectors;
}

std::list<Vector> get_measurements(std::vector<float>& ranges) 
{
    std::list<Vector> all_vectors;
    float angle_increment = 0.006135923322290182;
    float offset_of_laser = 0.13;

    // TODO sicherstellen dass nicht einfach 13cm als x genommen wird, die enden machen irgendwie keinen Sinn gerade

    int center_index = ranges.size() / 2;
    float index_range = (M_PI / 2.) / angle_increment;  // nur 180째 anschauen

    for (int angle_offset = 0; angle_offset <= index_range ; angle_offset++) {  // linke Seite von 0째 bis 90째
        int index = center_index + angle_offset; 
        ROS_INFO("index: %d", index);
        ROS_INFO("angle_offset: %d", angle_offset);
        if(ranges[index] != ranges[index]) continue;  // nan

        float r_laser = ranges[index];  // these are in relation to laser
        float theta_laser = angle_offset * angle_increment;
        ROS_INFO("r_l, theta_l: %f   -    %f", r_laser, theta_laser);

        float x = offset_of_laser + (r_laser * std::cos(theta_laser));  // these are to (0, 0)
        float y = r_laser * std::sin(theta_laser);

        Vector vector(x, y);
        ROS_INFO("point(np.array([%f, %f])", vector.x, vector.y);
        ROS_INFO("-------------------------------------------------------------");
        ROS_INFO("-------------------------------------------------------------");

        all_vectors.push_back(vector);
    }

    for (int angle_offset = 1; angle_offset <= index_range ; angle_offset++) {
        int index = center_index - angle_offset; 
        ROS_INFO("index: %d", index);
        ROS_INFO("angle_offset: %d", angle_offset);
        if(ranges[index] != ranges[index]) continue;  // nan

        float r_laser = ranges[index];  // these are in relation to laser
        float theta_laser = (2 * M_PI) - angle_offset * angle_increment;  // 360째 - the angle from x-axis
        ROS_INFO("r_l, theta_l: %f   -    %f", r_laser, theta_laser);

        float x = offset_of_laser + (r_laser * std::cos(theta_laser));  // these are to (0, 0)
        float y = r_laser * std::sin(theta_laser);

        Vector vector(x, y);
        ROS_INFO("point(np.array([%f, %f])", vector.x, vector.y);
        ROS_INFO("-------------------------------------------------------------");
        ROS_INFO("-------------------------------------------------------------");

        all_vectors.push_back(vector);
    }

    return all_vectors;
}

std::vector<float> getRangesFromFile(const std::string& input_file) {
    std::ifstream file(input_file);
    std::vector<float> ranges;
    float value;

    if(!file.is_open()) std::cerr << "Error: Could not open input for test" << std::endl;

    while(file >> value) {
        ranges.push_back(value);
    }
    file.close();
    return ranges;
}

TEST(RansacTest, Perpendicular30) {
    Vector expected_direction(0,1);
    Vector expected_offset(30,0);
    const float epsilon = 0.1;  // private values from line
    const int min_matches = 2;

    std::vector<float> ranges = {0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, 0.01899999938905239, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0.007000000216066837, -1, -1, -1, -1, -1, -1, -1, -1, 0.006000000052154064, 0.006000000052154064, 0.006000000052154064, 0.006000000052154064, 0.006000000052154064, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0.9879999756813049, 0.953000009059906, 0.9110000133514404, 0.8920000195503235, 0.8610000014305115, 0.8500000238418579, 0.8230000138282776, 0.8059999942779541, 0.7799999713897705, 0.7620000243186951, 0.7450000047683716, 0.7269999980926514, 0.7089999914169312, 0.6919999718666077, 0.6800000071525574, 0.6639999747276306, 0.6499999761581421, 0.6380000114440918, 0.6240000128746033, 0.6140000224113464, 0.5979999899864197, 0.5830000042915344, 0.574999988079071, 0.5669999718666077, 0.5540000200271606, 0.5419999957084656, 0.5339999794960022, 0.5230000019073486, 0.5180000066757202, 0.5059999823570251, 0.5059999823570251, 0.492000013589859, 0.4880000054836273, 0.47699999809265137, 0.4740000069141388, 0.460999995470047, 0.453000009059906, 0.45100000500679016, 0.44200000166893005, 0.43799999356269836, 0.4350000023841858, 0.421999990940094, 0.4180000126361847, 0.4099999964237213, 0.40400001406669617, 0.39899998903274536, 0.39800000190734863, 0.39100000262260437, 0.3790000081062317, 0.3779999911785126, 0.3659999966621399, 0.36399999260902405, 0.3630000054836273, 0.35600000619888306, 0.3490000069141388, 0.34700000286102295, 0.34599998593330383, 0.34599998593330383, 0.3400000035762787, 0.3269999921321869, 0.32499998807907104, 0.32499998807907104, 0.3240000009536743, 0.3240000009536743, 0.31700000166893005, 0.3109999895095825, 0.3070000112056732, 0.3059999942779541, 0.30000001192092896, 0.29899999499320984, 0.29499998688697815, 0.28999999165534973, 0.2840000092983246, 0.2840000092983246, 0.2800000011920929, 0.2800000011920929, 0.27799999713897705, 0.27799999713897705, 0.27799999713897705, 0.27799999713897705, 0.2720000147819519, 0.27000001072883606, 0.26499998569488525, 0.2639999985694885, 0.2639999985694885, 0.2639999985694885, 0.25600001215934753, 0.25600001215934753, 0.2549999952316284, 0.2529999911785126, 0.2529999911785126, 0.25200000405311584, 0.24699999392032623, 0.24699999392032623, 0.2460000067949295, 0.2460000067949295, 0.24400000274181366, 0.24300000071525574, 0.24300000071525574, 0.24199999868869781, 0.24199999868869781, 0.24199999868869781, 0.24199999868869781, 0.2409999966621399, 0.2409999966621399, 0.2409999966621399, 0.2409999966621399, 0.23399999737739563, 0.23399999737739563, 0.23399999737739563, 0.23399999737739563, 0.23600000143051147, 0.23600000143051147, 0.23600000143051147, 0.23399999737739563, 0.23399999737739563, 0.2329999953508377, 0.2329999953508377, 0.23199999332427979, 0.23199999332427979, 0.23199999332427979, 0.23000000417232513, 0.2290000021457672, 0.22699999809265137, 0.22699999809265137, 0.22699999809265137, 0.22699999809265137, 0.22699999809265137, 0.22599999606609344, 0.2240000069141388, 0.2240000069141388, 0.22300000488758087, 0.21899999678134918, 0.21899999678134918, 0.21899999678134918, 0.21899999678134918, 0.21699999272823334, 0.21199999749660492, 0.21199999749660492, 0.20999999344348907, 0.20999999344348907, 0.20999999344348907, 0.21199999749660492, 0.20900000631809235, 0.20900000631809235, 0.20800000429153442, 0.20499999821186066, 0.20000000298023224, 0.20000000298023224, 0.19900000095367432, 0.19900000095367432, 0.19900000095367432, 0.19900000095367432, 0.19900000095367432, 0.19499999284744263, 0.19499999284744263, 0.19499999284744263, 0.19499999284744263, 0.19499999284744263, 0.19499999284744263, 0.19599999487400055, 0.19699999690055847, 0.19699999690055847, 0.1940000057220459, 0.19499999284744263, 0.1940000057220459, 0.1940000057220459, 0.1940000057220459, 0.1940000057220459, 0.1940000057220459, 0.19300000369548798, 0.1940000057220459, 0.19300000369548798, 0.19300000369548798, 0.19300000369548798, 0.19300000369548798, 0.19300000369548798, 0.19200000166893005, 0.19499999284744263, 0.19099999964237213, 0.1940000057220459, 0.19099999964237213, 0.19099999964237213, 0.19099999964237213, 0.19200000166893005, 0.19099999964237213, 0.19200000166893005, 0.19200000166893005, 0.19200000166893005, 0.19200000166893005, 0.1940000057220459, 0.1940000057220459, 0.1940000057220459, 0.1889999955892563, 0.1940000057220459, 0.1940000057220459, 0.1940000057220459, 0.19499999284744263, 0.19499999284744263, 0.1940000057220459, 0.1889999955892563, 0.1889999955892563, 0.18799999356269836, 0.1889999955892563, 0.1899999976158142, 0.19099999964237213, 0.1940000057220459, 0.1940000057220459, 0.1940000057220459, 0.19200000166893005, 0.19200000166893005, 0.19200000166893005, 0.19200000166893005, 0.19200000166893005, 0.19300000369548798, 0.19300000369548798, 0.19200000166893005, 0.19300000369548798, 0.19300000369548798, 0.19099999964237213, 0.1899999976158142, 0.19099999964237213, 0.1889999955892563, 0.1889999955892563, 0.18799999356269836, 0.18799999356269836, 0.18799999356269836, 0.18799999356269836, 0.18799999356269836, 0.18799999356269836, 0.18799999356269836, 0.18799999356269836, 0.18799999356269836, 0.1899999976158142, 0.1899999976158142, 0.1899999976158142, 0.1899999976158142, 0.18799999356269836, 0.18799999356269836, 0.18799999356269836, 0.18799999356269836, 0.18799999356269836, 0.18799999356269836, 0.18799999356269836, 0.18799999356269836, 0.18700000643730164, 0.18799999356269836, 0.18799999356269836, 0.18799999356269836, 0.19099999964237213, 0.19300000369548798, 0.19300000369548798, 0.19300000369548798, 0.19099999964237213, 0.1860000044107437, 0.1860000044107437, 0.1860000044107437, 0.18799999356269836, 0.18799999356269836, 0.1889999955892563, 0.19200000166893005, 0.19200000166893005, 0.1899999976158142, 0.1899999976158142, 0.1899999976158142, 0.1899999976158142, 0.1899999976158142, 0.1899999976158142, 0.19200000166893005, 0.1899999976158142, 0.1860000044107437, 0.1860000044107437, 0.19300000369548798, 0.18799999356269836, 0.19300000369548798, 0.1940000057220459, 0.1940000057220459, 0.1940000057220459, 0.1940000057220459, 0.19499999284744263, 0.19499999284744263, 0.19499999284744263, 0.19599999487400055, 0.19599999487400055, 0.20100000500679016, 0.19900000095367432, 0.20100000500679016, 0.20000000298023224, 0.20600000023841858, 0.20600000023841858, 0.20600000023841858, 0.20600000023841858, 0.20600000023841858, 0.20800000429153442, 0.20800000429153442, 0.20800000429153442, 0.20900000631809235, 0.20999999344348907, 0.20900000631809235, 0.20999999344348907, 0.20999999344348907, 0.20999999344348907, 0.210999995470047, 0.210999995470047, 0.21199999749660492, 0.21899999678134918, 0.21899999678134918, 0.21899999678134918, 0.21699999272823334, 0.21199999749660492, 0.21199999749660492, 0.21199999749660492, 0.21799999475479126, 0.21899999678134918, 0.21899999678134918, 0.2199999988079071, 0.22200000286102295, 0.23000000417232513, 0.23000000417232513, 0.23399999737739563, 0.23399999737739563, 0.23399999737739563, 0.23600000143051147, 0.23800000548362732, 0.23899999260902405, 0.23899999260902405, 0.2409999966621399, 0.23999999463558197, 0.23999999463558197, 0.2370000034570694, 0.2370000034570694, 0.23499999940395355, 0.2329999953508377, 0.2329999953508377, 0.23199999332427979, 0.23100000619888306, 0.23100000619888306, 0.23100000619888306, 0.23100000619888306, 0.2370000034570694, 0.2370000034570694, 0.2370000034570694, 0.23800000548362732, 0.23800000548362732, 0.24300000071525574, 0.24300000071525574, 0.24300000071525574, 0.24300000071525574, 0.24500000476837158, 0.24500000476837158, 0.24699999392032623, 0.24899999797344208, 0.25099998712539673, 0.25099998712539673, 0.2529999911785126, 0.2549999952316284, 0.2549999952316284, 0.25999999046325684, 0.2619999945163727, 0.2619999945163727, 0.257999986410141, 0.26100000739097595, 0.26100000739097595, 0.26100000739097595, 0.27000001072883606, 0.27000001072883606, 0.27000001072883606, 0.27000001072883606, 0.27000001072883606, 0.27000001072883606, 0.2709999978542328, 0.2709999978542328, 0.2709999978542328, 0.27799999713897705, 0.27900001406669617, 0.2809999883174896, 0.28600001335144043, 0.28600001335144043, 0.28600001335144043, 0.28700000047683716, 0.2879999876022339, 0.29499998688697815, 0.29600000381469727, 0.30300000309944153, 0.3089999854564667, 0.3100000023841858, 0.3140000104904175, 0.3190000057220459, 0.32100000977516174, 0.32199999690055847, 0.3240000009536743, 0.3330000042915344, 0.33500000834465027, 0.33500000834465027, 0.3400000035762787, 0.3440000116825104, 0.3440000116825104, 0.3499999940395355, 0.3499999940395355, 0.35899999737739563, 0.36000001430511475, 0.3619999885559082, 0.3630000054836273, 0.3709999918937683, 0.37700000405311584, 0.382999986410141, 0.3889999985694885, 0.3889999985694885, 0.38999998569488525, 0.40299999713897705, 0.40400001406669617, 0.4129999876022339, 0.4180000126361847, 0.42500001192092896, 0.4259999990463257, 0.4359999895095825, 0.43700000643730164, 0.4440000057220459, 0.4480000138282776, 0.45399999618530273, 0.4580000042915344, 0.4690000116825104, 0.4740000069141388, 0.47999998927116394, 0.49300000071525574, 0.5070000290870667, 0.5070000290870667, 0.5170000195503235, 0.5220000147819519, 0.5329999923706055, 0.5460000038146973, 0.546999990940094, 0.5600000023841858, 0.5730000138282776, 0.578000009059906, 0.5870000123977661, 0.5989999771118164, 0.6179999709129333, 0.6200000047683716, 0.6370000243186951, 0.6539999842643738, 0.6669999957084656, 0.6809999942779541, 0.6970000267028809, 0.7020000219345093, 0.7200000286102295, 0.7440000176429749, 0.7630000114440918, 0.7789999842643738, 0.8069999814033508, 0.8240000009536743, 0.847000002861023, 0.8809999823570251, 0.9089999794960022, 0.9330000281333923, 0.949999988079071, 0.9919999837875366, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}; 
    
    std::list<Vector> measurements = get_measurements(ranges);
    Vector point_array[measurements.size()];
    std::copy(measurements.begin(), measurements.end(), point_array);

    std::vector<Line> discovered_lines = perform_ransack(point_array, measurements.size(), epsilon, min_matches);

    ASSERT_FALSE(discovered_lines.empty());

    std::cout << "Discovered Lines:" << std::endl;
    for (const auto& line : discovered_lines) {
        Vector direction = line.m_direction;
        Vector offset = line.m_offset;
        std::cout << "Line Direction: (" << direction.x << ", " << direction.y << ")" << std::endl;
        std::cout << "Line Offset: (" << offset.x << ", " << offset.y << ")" << std::endl;
        
        ASSERT_NEAR(direction.x, expected_direction.x, epsilon);
        ASSERT_NEAR(direction.y, expected_direction.y, epsilon);
        ASSERT_NEAR(offset.x, expected_offset.x, epsilon);
        ASSERT_NEAR(offset.y, expected_offset.y, epsilon);
    }
}

int main(int argc, char **argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
